{"version":3,"sources":["webpack:///path---posts-2018-01-28-getting-started-with-gatsby-a434ede7ca66a423285a.js","webpack:///./.cache/json/posts-2018-01-28-getting-started-with-gatsby.json"],"names":["webpackJsonp","302","module","exports","data","markdownRemark","html","frontmatter","title","datetime","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,owOAAixNC,aAA2jBC,MAAA,8BAAAC,SAAA,2BAAAC,KAAA,cAAAC,KAAA,gDAAAC,MAAA,sCAAAC,QAAA,iDAAgQC,aAAgBC,MAAQT,KAAA,0/FAAAU,GAAA,8GAAAT,aAAuoGG,KAAA,2BAAAC,KAAA,8BAAAH,MAAA,YAAAK,QAAA,kEAAAD,MAAA,wCAAsNK,KAAA","file":"path---posts-2018-01-28-getting-started-with-gatsby-a434ede7ca66a423285a.js","sourcesContent":["webpackJsonp([146939661270062],{\n\n/***/ 302:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>These are some notes in case you are interested in getting your site up and running on <a href=\\\"https://pages.github.com/\\\">Github Pages</a> using <a href=\\\"https://www.gatsbyjs.org/\\\">Gatsby</a>.</p>\\n<h1>Gatsby?</h1>\\n<p><a href=\\\"https://www.gatsbyjs.org/\\\">Gatsby</a> combines the power of <a href=\\\"https://reactjs.org\\\">React</a>, <a href=\\\"http://graphql.org/\\\">GraphQL</a> and <a href=\\\"https://webpack.js.org/\\\">Webpack</a> to make publishing your own static PWA a breeze. Combine it with the generous and robust static site host (<a href=\\\"https://pages.github.com/\\\">Github Pages</a>, <a href=\\\"https://www.netlify.com/\\\">Netlify</a>...) and you can deploy your site in a few minutes with minimal associated cost.</p>\\n<blockquote>\\n<p>The origin of this blog post comes from the great <a href=\\\"https://egghead.io/courses/build-a-blog-with-react-and-markdown-using-gatsby\\\">Egghead.io tutorial by Taylor Bell</a>.</p>\\n<p>You can also find great resources in the <a href=\\\"https://www.gatsbyjs.org/docs/\\\">Gatsby's documentation</a>.</p>\\n</blockquote>\\n<h1>The Gameplan</h1>\\n<ol>\\n<li>\\n<p>Install Gatsby <code>npm install --global gatsby-cli</code></p>\\n</li>\\n<li>\\n<p>Create a new site:</p>\\n<pre><code class=\\\"language-console\\\">gatsby new gatsby-site\\ncd gatsby-site\\ngatsby develop\\n</code></pre>\\n<p>Gatsby will start a hot-reloading development environment accessible at <code>localhost:8000</code></p>\\n</li>\\n<li>\\n<p>If you want to use markdown as an editor system, install the following plugins:</p>\\n<pre><code class=\\\"language-console\\\">yarn add gatsby-source-filesystem --save\\nyarn add gatsby-tranformer-remark --save\\n</code></pre>\\n<p>Then configure the plugins in the <code>gatsby-config.js</code> file:</p>\\n<pre><code class=\\\"language-javascript\\\">plugins: [\\n  `gatsby-plugin-react-helmet`,\\n  `gatsby-transformer-remark`,\\n  {\\n    resolve: `gatsby-source-filesystem`,\\n    options: {\\n      name: `src`,\\n      path: `${__dirname}/src`\\n    }\\n  }\\n]\\n</code></pre>\\n<p>This will set <code>src</code> as the root path for your application files. </p>\\n</li>\\n<li>\\n<p>In <code>src/pages</code> you can place your folders in which you can add your <code>index.md</code> markdown files. You can name each folder with <code>YEAR-MONTH-DAY-SLUG</code>. At the top of the<code>index.md</code> file of each pages folder, add a snippet as such:</p>\\n<pre><code class=\\\"language-markdown\\\">---\\npath: \\\"/YEAR-MONTH-DAY-SLUG\\\"\\ndate: \\\"TIMESTAMP\\\"\\ntitle: \\\"Lorem ipsum\\\"\\nexcerpt: \\\"Dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\\"\\n---\\n</code></pre>\\n</li>\\n<li>\\n<p>in <code>src/page/index.js</code>, create a proper GraphQL query to provide access to the collection of pages within the <code>src/pages</code> folder. The query in our case would look like:</p>\\n<pre><code class=\\\"language-javascript\\\">  const IndexPage = ({ data }) => {\\n  const { edges: posts } = data.allMarkdownRemark;\\n  return (\\n    &#x3C;div>\\n      &#x3C;h1>Hi people, check my stuff out&#x3C;/h1>\\n      { \\n        posts.map(({ node: post }) => {\\n          const { frontmatter } = post;\\n          return (\\n            &#x3C;div key={ frontmatter.date }>\\n              &#x3C;h2>\\n                &#x3C;Link to={ frontmatter.path }>\\n                  { frontmatter.title }\\n                &#x3C;/Link>\\n              &#x3C;/h2>\\n              &#x3C;p>\\n                &#x3C;b>{ frontmatter.date }&#x3C;/b> - { frontmatter.excerpt }\\n              &#x3C;/p>\\n            &#x3C;/div>\\n          );\\n        })\\n      }\\n    &#x3C;/div>\\n  );\\n};\\n\\nexport const query = graphql`\\n  query Indexquery {\\n    allMarkdownRemark {\\n      totalCount\\n      edges {\\n        node {\\n          id,\\n          frontmatter {\\n            title\\n            date(formatString: \\\"MMM DD, 'YY\\\")\\n            path\\n            excerpt\\n          }\\n        }\\n      }\\n    }\\n  }\\n`\\n</code></pre>\\n</li>\\n<li>\\n<p>Finally, create your post template to display your content. In <code>templates/blog-post.js</code>:</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react'\\nimport Link from 'gatsby-link'\\nimport Helmet from 'react-helmet'\\n\\nconst Template = ({data, location}) => {\\n  const { markdownRemark: post } = data\\n  const { frontmatter, html } = post\\n\\n  return (\\n    &#x3C;div>\\n      &#x3C;Helmet title={`${title} - My Blog`} />\\n\\n      &#x3C;div>\\n        &#x3C;h1>{title}&#x3C;/h1>\\n        &#x3C;h3>{date}&#x3C;/h3>\\n\\n        &#x3C;div dangerouslySetInnerHTML={{__html: html}} />\\n      &#x3C;/div>\\n    &#x3C;/div>\\n  )\\n}\\n\\nexport const pageQuery = graphql`\\nquery BlogPostByPath($path: String!) {\\n  markdownRemark(frontmatter: { path: { eq: $path } }) {\\n    html \\n    frontmatter {\\n      title\\n      date(formatString: \\\"MMMM, DD, YYYY\\\")\\n      path\\n      tags\\n      excerpt\\n    }\\n  }\\n}\\n`\\n\\nexport default Template\\n</code></pre>\\n</li>\\n<li>\\n<p>Hook your template and your graphql query. In <code>gatsby-node.js</code>:</p>\\n<pre><code class=\\\"language-javascript\\\">const path = require('path');\\n\\nexports.createPages = ({ boundActionCreators, graphql }) => {\\n  const { createPage } = boundActionCreators;\\n  const blogPostTemplate = path.resolve('src/templates/blog-post.js');\\n\\n  return graphql(\\n    `{\\n      allMarkdownRemark(sort: { order: ASC, fields: [frontmatter___date] }) {\\n        edges {\\n          node {\\n            html\\n            id\\n            frontmatter {\\n              date\\n              path\\n              title\\n              excerpt\\n              tags\\n            }\\n          }\\n        }\\n      }\\n    }`\\n  )\\n  .then(result => {\\n    if (result.errors) {\\n      return Promise.reject(result.errors);\\n    }\\n\\n    const posts = result.data.allMarkdownRemark.edges;\\n\\n    console.log(`There are ${posts.length} post(s)`);\\n\\n    posts.forEach(({node}, index) => {\\n      createPage({\\n        path: node.frontmatter.path,\\n        component: blogPostTemplate,\\n        context: {\\n          prev: index === 0 ? null : posts[index - 1].node,\\n          next: index === (posts.length - 1) ? null : posts[index + 1].node\\n        }\\n      })\\n    });\\n  })\\n</code></pre>\\n</li>\\n<li>\\n<p>Deploy your site to Github:</p>\\n</li>\\n<li>\\n<p>Install <code>gh-pages</code>: </p>\\n<pre><code class=\\\"language-console\\\">yarn add --dev gh-pages\\n</code></pre>\\n</li>\\n<li>\\n<p>Create a new project on github and set up the <code>pathPrefix</code> of the <code>gatsby-config</code> file accordingly:</p>\\n<pre><code class=\\\"language-json\\\">module.exports = {\\npathPrefix: `/my-github-project-name`,\\n...\\n</code></pre>\\n</li>\\n<li>\\n<p>Hook the <code>deploy</code> command in your npm <code>package.json</code> file:</p>\\n<pre><code class=\\\"language-json\\\">...\\n\\\"scripts\\\": {\\n...\\n\\\"deploy\\\": \\\"gatsby build --prefix-paths &#x26;&#x26; gh-pages -d public\\\",\\n...\\n}\\n...\\n</code></pre>\\n</li>\\n</ol>\\n<h1>Other Gatsby commands:</h1>\\n<ul>\\n<li><code>gatsby build</code> — Gatsby will perform an optimized production build for your site generating static HTML and per-route JavaScript code bundles.</li>\\n<li><code>gatsby serve</code> — Gatsby starts a local HTML server for testing your built site.</li>\\n</ul>\\n<blockquote>\\n<p>Lots of great resources in the Gatsby <a href=\\\"https://www.gatsbyjs.org/docs\\\">docs</a> and <a href=\\\"https://www.gatsbyjs.org/docs/awesome-gatsby/\\\">community pages</a>.</p>\\n</blockquote>\",\"frontmatter\":{\"title\":\"Getting started with Gatsby\",\"datetime\":\"2018-01-28T03:15:59.165Z\",\"date\":\"Jan 28, '18\",\"path\":\"/posts/2018-01-28-getting-started-with-gatsby\",\"tags\":[\"blog\",\"github\",\"gatsby\",\"eggheadio\"],\"excerpt\":\"Getting your site up to speed using Gatsby.\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p>Have you ever been put in a situation where, facing choices, you make a call, and it ends up blowing up in your hand?\\nNot only you don’t get the expected result, but the backlash is even worse, ensuing in a ripple effect of negative outcomes.</p>\\n<p><strong>That does not feel good, does it?</strong></p>\\n<p>I had a great opportunity and was to complete a demo that I would have to lead a presentation on in front of deciders. At that time, however, I was already deep down into a task and felt like I needed to finish it first before shifting my focus.</p>\\n<p>Once done with it, I moved onto the assignment and realized that I overlooked some details in the requirements. No big deal, I was still confident I could complete the demo even though the deadline was soon approaching.\\nHowever, as time was going by, I started realizing that I needed to make some trade-offs to get things ready and send the demo before the deadline. As it turned out, while I was dead set on showcasing a great demo, I forewent submitting it until the day of the presentation.</p>\\n<p>Hustling extra hours and catching little to no sleep to pull a hero move ended up being a complete disaster.\\nDuring the presentation, my brain got so cloudy that I couldn’t articulate my design choices (which I was quite satisfied with) nor comprehend the most simple questions from the audience.\\nThe whole experience sucked. I realized that, no matter how skilled I could have been, I wouldn’t have been able to pull myself out the whole I had dug myself in.</p>\\n<p>Worse, the next day, after finally catching some much-needed sleep, I woke up with all the answers from the presentation. What a raging feeling to realize how wrong the answers you gave the day before were.</p>\\n<p><strong>In a world where the hustle mentally is put on the pedestal as the way to success, restlessness will inevitably catch up to you and lead to spectacular adverse effects.</strong></p>\\n<p>The things I have learned from my experience might sound cliché to some but will always guarantee the outcome you seek:</p>\\n<ul>\\n<li>Set the expectations by validating your understanding of the requirements and confirming any assumptions you are making as early as possible (even before the task is to be started),</li>\\n<li>If requirements changes or if you discover something: take pause and reassess your timeline,</li>\\n<li>If the timeline needs to change, communicate with other parties as early as possible and provide clear context as to why the changes are required,</li>\\n<li>Provide recommendations (cutting features, pushing the deadline) and state the new timeline to reset the expectations.</li>\\n<li>Repeat.</li>\\n</ul>\\n<p>Following this simple feedback loop should help avoid the negative backlash that blowing a deadline will cause, ensuring you to meet expectations every single time.</p>\\n<p>Happy face!</p>\\n<p>PS: This article was originally published on my <a href=\\\"https://medium.com/@xlozinguez/no-heroes-18e02ae4f1b8\\\">Medium</a> <a href=\\\"https://medium.com/@xlozinguez\\\">profile</a></p>\",\"id\":\"/Users/x-home/Dev/blogs/xl/src/pages/posts/2017-12-01-no-heroes/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-12-01T03:15:59.165Z\",\"path\":\"/posts/2017-12-01-no-heroes\",\"title\":\"No Heroes\",\"excerpt\":\"Lesson learned from having to prioritize conflicting timelines.\",\"tags\":[\"Heroes\",\"Entrepreneurship\",\"Hustle\"]}},\"next\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-2018-01-28-getting-started-with-gatsby-a434ede7ca66a423285a.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>These are some notes in case you are interested in getting your site up and running on <a href=\\\"https://pages.github.com/\\\">Github Pages</a> using <a href=\\\"https://www.gatsbyjs.org/\\\">Gatsby</a>.</p>\\n<h1>Gatsby?</h1>\\n<p><a href=\\\"https://www.gatsbyjs.org/\\\">Gatsby</a> combines the power of <a href=\\\"https://reactjs.org\\\">React</a>, <a href=\\\"http://graphql.org/\\\">GraphQL</a> and <a href=\\\"https://webpack.js.org/\\\">Webpack</a> to make publishing your own static PWA a breeze. Combine it with the generous and robust static site host (<a href=\\\"https://pages.github.com/\\\">Github Pages</a>, <a href=\\\"https://www.netlify.com/\\\">Netlify</a>...) and you can deploy your site in a few minutes with minimal associated cost.</p>\\n<blockquote>\\n<p>The origin of this blog post comes from the great <a href=\\\"https://egghead.io/courses/build-a-blog-with-react-and-markdown-using-gatsby\\\">Egghead.io tutorial by Taylor Bell</a>.</p>\\n<p>You can also find great resources in the <a href=\\\"https://www.gatsbyjs.org/docs/\\\">Gatsby's documentation</a>.</p>\\n</blockquote>\\n<h1>The Gameplan</h1>\\n<ol>\\n<li>\\n<p>Install Gatsby <code>npm install --global gatsby-cli</code></p>\\n</li>\\n<li>\\n<p>Create a new site:</p>\\n<pre><code class=\\\"language-console\\\">gatsby new gatsby-site\\ncd gatsby-site\\ngatsby develop\\n</code></pre>\\n<p>Gatsby will start a hot-reloading development environment accessible at <code>localhost:8000</code></p>\\n</li>\\n<li>\\n<p>If you want to use markdown as an editor system, install the following plugins:</p>\\n<pre><code class=\\\"language-console\\\">yarn add gatsby-source-filesystem --save\\nyarn add gatsby-tranformer-remark --save\\n</code></pre>\\n<p>Then configure the plugins in the <code>gatsby-config.js</code> file:</p>\\n<pre><code class=\\\"language-javascript\\\">plugins: [\\n  `gatsby-plugin-react-helmet`,\\n  `gatsby-transformer-remark`,\\n  {\\n    resolve: `gatsby-source-filesystem`,\\n    options: {\\n      name: `src`,\\n      path: `${__dirname}/src`\\n    }\\n  }\\n]\\n</code></pre>\\n<p>This will set <code>src</code> as the root path for your application files. </p>\\n</li>\\n<li>\\n<p>In <code>src/pages</code> you can place your folders in which you can add your <code>index.md</code> markdown files. You can name each folder with <code>YEAR-MONTH-DAY-SLUG</code>. At the top of the<code>index.md</code> file of each pages folder, add a snippet as such:</p>\\n<pre><code class=\\\"language-markdown\\\">---\\npath: \\\"/YEAR-MONTH-DAY-SLUG\\\"\\ndate: \\\"TIMESTAMP\\\"\\ntitle: \\\"Lorem ipsum\\\"\\nexcerpt: \\\"Dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\\"\\n---\\n</code></pre>\\n</li>\\n<li>\\n<p>in <code>src/page/index.js</code>, create a proper GraphQL query to provide access to the collection of pages within the <code>src/pages</code> folder. The query in our case would look like:</p>\\n<pre><code class=\\\"language-javascript\\\">  const IndexPage = ({ data }) => {\\n  const { edges: posts } = data.allMarkdownRemark;\\n  return (\\n    &#x3C;div>\\n      &#x3C;h1>Hi people, check my stuff out&#x3C;/h1>\\n      { \\n        posts.map(({ node: post }) => {\\n          const { frontmatter } = post;\\n          return (\\n            &#x3C;div key={ frontmatter.date }>\\n              &#x3C;h2>\\n                &#x3C;Link to={ frontmatter.path }>\\n                  { frontmatter.title }\\n                &#x3C;/Link>\\n              &#x3C;/h2>\\n              &#x3C;p>\\n                &#x3C;b>{ frontmatter.date }&#x3C;/b> - { frontmatter.excerpt }\\n              &#x3C;/p>\\n            &#x3C;/div>\\n          );\\n        })\\n      }\\n    &#x3C;/div>\\n  );\\n};\\n\\nexport const query = graphql`\\n  query Indexquery {\\n    allMarkdownRemark {\\n      totalCount\\n      edges {\\n        node {\\n          id,\\n          frontmatter {\\n            title\\n            date(formatString: \\\"MMM DD, 'YY\\\")\\n            path\\n            excerpt\\n          }\\n        }\\n      }\\n    }\\n  }\\n`\\n</code></pre>\\n</li>\\n<li>\\n<p>Finally, create your post template to display your content. In <code>templates/blog-post.js</code>:</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react'\\nimport Link from 'gatsby-link'\\nimport Helmet from 'react-helmet'\\n\\nconst Template = ({data, location}) => {\\n  const { markdownRemark: post } = data\\n  const { frontmatter, html } = post\\n\\n  return (\\n    &#x3C;div>\\n      &#x3C;Helmet title={`${title} - My Blog`} />\\n\\n      &#x3C;div>\\n        &#x3C;h1>{title}&#x3C;/h1>\\n        &#x3C;h3>{date}&#x3C;/h3>\\n\\n        &#x3C;div dangerouslySetInnerHTML={{__html: html}} />\\n      &#x3C;/div>\\n    &#x3C;/div>\\n  )\\n}\\n\\nexport const pageQuery = graphql`\\nquery BlogPostByPath($path: String!) {\\n  markdownRemark(frontmatter: { path: { eq: $path } }) {\\n    html \\n    frontmatter {\\n      title\\n      date(formatString: \\\"MMMM, DD, YYYY\\\")\\n      path\\n      tags\\n      excerpt\\n    }\\n  }\\n}\\n`\\n\\nexport default Template\\n</code></pre>\\n</li>\\n<li>\\n<p>Hook your template and your graphql query. In <code>gatsby-node.js</code>:</p>\\n<pre><code class=\\\"language-javascript\\\">const path = require('path');\\n\\nexports.createPages = ({ boundActionCreators, graphql }) => {\\n  const { createPage } = boundActionCreators;\\n  const blogPostTemplate = path.resolve('src/templates/blog-post.js');\\n\\n  return graphql(\\n    `{\\n      allMarkdownRemark(sort: { order: ASC, fields: [frontmatter___date] }) {\\n        edges {\\n          node {\\n            html\\n            id\\n            frontmatter {\\n              date\\n              path\\n              title\\n              excerpt\\n              tags\\n            }\\n          }\\n        }\\n      }\\n    }`\\n  )\\n  .then(result => {\\n    if (result.errors) {\\n      return Promise.reject(result.errors);\\n    }\\n\\n    const posts = result.data.allMarkdownRemark.edges;\\n\\n    console.log(`There are ${posts.length} post(s)`);\\n\\n    posts.forEach(({node}, index) => {\\n      createPage({\\n        path: node.frontmatter.path,\\n        component: blogPostTemplate,\\n        context: {\\n          prev: index === 0 ? null : posts[index - 1].node,\\n          next: index === (posts.length - 1) ? null : posts[index + 1].node\\n        }\\n      })\\n    });\\n  })\\n</code></pre>\\n</li>\\n<li>\\n<p>Deploy your site to Github:</p>\\n</li>\\n<li>\\n<p>Install <code>gh-pages</code>: </p>\\n<pre><code class=\\\"language-console\\\">yarn add --dev gh-pages\\n</code></pre>\\n</li>\\n<li>\\n<p>Create a new project on github and set up the <code>pathPrefix</code> of the <code>gatsby-config</code> file accordingly:</p>\\n<pre><code class=\\\"language-json\\\">module.exports = {\\npathPrefix: `/my-github-project-name`,\\n...\\n</code></pre>\\n</li>\\n<li>\\n<p>Hook the <code>deploy</code> command in your npm <code>package.json</code> file:</p>\\n<pre><code class=\\\"language-json\\\">...\\n\\\"scripts\\\": {\\n...\\n\\\"deploy\\\": \\\"gatsby build --prefix-paths &#x26;&#x26; gh-pages -d public\\\",\\n...\\n}\\n...\\n</code></pre>\\n</li>\\n</ol>\\n<h1>Other Gatsby commands:</h1>\\n<ul>\\n<li><code>gatsby build</code> — Gatsby will perform an optimized production build for your site generating static HTML and per-route JavaScript code bundles.</li>\\n<li><code>gatsby serve</code> — Gatsby starts a local HTML server for testing your built site.</li>\\n</ul>\\n<blockquote>\\n<p>Lots of great resources in the Gatsby <a href=\\\"https://www.gatsbyjs.org/docs\\\">docs</a> and <a href=\\\"https://www.gatsbyjs.org/docs/awesome-gatsby/\\\">community pages</a>.</p>\\n</blockquote>\",\"frontmatter\":{\"title\":\"Getting started with Gatsby\",\"datetime\":\"2018-01-28T03:15:59.165Z\",\"date\":\"Jan 28, '18\",\"path\":\"/posts/2018-01-28-getting-started-with-gatsby\",\"tags\":[\"blog\",\"github\",\"gatsby\",\"eggheadio\"],\"excerpt\":\"Getting your site up to speed using Gatsby.\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p>Have you ever been put in a situation where, facing choices, you make a call, and it ends up blowing up in your hand?\\nNot only you don’t get the expected result, but the backlash is even worse, ensuing in a ripple effect of negative outcomes.</p>\\n<p><strong>That does not feel good, does it?</strong></p>\\n<p>I had a great opportunity and was to complete a demo that I would have to lead a presentation on in front of deciders. At that time, however, I was already deep down into a task and felt like I needed to finish it first before shifting my focus.</p>\\n<p>Once done with it, I moved onto the assignment and realized that I overlooked some details in the requirements. No big deal, I was still confident I could complete the demo even though the deadline was soon approaching.\\nHowever, as time was going by, I started realizing that I needed to make some trade-offs to get things ready and send the demo before the deadline. As it turned out, while I was dead set on showcasing a great demo, I forewent submitting it until the day of the presentation.</p>\\n<p>Hustling extra hours and catching little to no sleep to pull a hero move ended up being a complete disaster.\\nDuring the presentation, my brain got so cloudy that I couldn’t articulate my design choices (which I was quite satisfied with) nor comprehend the most simple questions from the audience.\\nThe whole experience sucked. I realized that, no matter how skilled I could have been, I wouldn’t have been able to pull myself out the whole I had dug myself in.</p>\\n<p>Worse, the next day, after finally catching some much-needed sleep, I woke up with all the answers from the presentation. What a raging feeling to realize how wrong the answers you gave the day before were.</p>\\n<p><strong>In a world where the hustle mentally is put on the pedestal as the way to success, restlessness will inevitably catch up to you and lead to spectacular adverse effects.</strong></p>\\n<p>The things I have learned from my experience might sound cliché to some but will always guarantee the outcome you seek:</p>\\n<ul>\\n<li>Set the expectations by validating your understanding of the requirements and confirming any assumptions you are making as early as possible (even before the task is to be started),</li>\\n<li>If requirements changes or if you discover something: take pause and reassess your timeline,</li>\\n<li>If the timeline needs to change, communicate with other parties as early as possible and provide clear context as to why the changes are required,</li>\\n<li>Provide recommendations (cutting features, pushing the deadline) and state the new timeline to reset the expectations.</li>\\n<li>Repeat.</li>\\n</ul>\\n<p>Following this simple feedback loop should help avoid the negative backlash that blowing a deadline will cause, ensuring you to meet expectations every single time.</p>\\n<p>Happy face!</p>\\n<p>PS: This article was originally published on my <a href=\\\"https://medium.com/@xlozinguez/no-heroes-18e02ae4f1b8\\\">Medium</a> <a href=\\\"https://medium.com/@xlozinguez\\\">profile</a></p>\",\"id\":\"/Users/x-home/Dev/blogs/xl/src/pages/posts/2017-12-01-no-heroes/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-12-01T03:15:59.165Z\",\"path\":\"/posts/2017-12-01-no-heroes\",\"title\":\"No Heroes\",\"excerpt\":\"Lesson learned from having to prioritize conflicting timelines.\",\"tags\":[\"Heroes\",\"Entrepreneurship\",\"Hustle\"]}},\"next\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-2018-01-28-getting-started-with-gatsby.json\n// module id = 302\n// module chunks = 146939661270062"],"sourceRoot":""}